<?php

namespace app\controllers;

use app\services\mailchimp\MailChimpService;
use Yii;
use app\models\common\BaseUploadForm;
use app\models\User;
use app\models\search\UserSearch;
use app\controllers\common\BaseAdminController;
use yii\bootstrap\ActiveForm;
use yii\db\Expression;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\web\Response;
use yii\web\UploadedFile;
use app\auth\AccessControl;


/**
 * UserController implements the CRUD actions for User model.
 */
class UserController extends BaseAdminController
{
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
	 * @inheritdoc
	 */
	public function behaviors()
	{
		return ArrayHelper::merge([
			'verbs' => [
				'class' => VerbFilter::className(),
				'actions' => [
					'delete' => ['post','get']
				],
			],
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['delete'],
                        'allow' => true,
                        'roles' => ['SchoolAdmin'],
                    ],
                ],
            ],
		], parent::behaviors());
	}

	/**
	 * Lists all User models.
	 * @return mixed
	 */
	public function actionIndex()
	{
		$searchModel = new UserSearch();
		$dataProvider = $searchModel->search(Yii::$app->request->queryParams);

		return $this->render('index', [
			'searchModel' => $searchModel,
			'dataProvider' => $dataProvider,
		]);
	}

	/**
	 * Displays a single User model.
	 * @param integer $id
	 * @return mixed
	 */
	public function actionView($id)
	{
		return $this->render('view', [
			'model' => $this->findModel($id),
		]);
	}

	/**
	 * Creates a new User model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 * @return mixed
	 */
	public function actionCreate()
	{
		$model = new User();

		if($model->load(Yii::$app->request->post()) && $model->save())
		{
			$role = Yii::$app->authManager->getRole('BasicUser');
			Yii::$app->authManager->assign($role, $model->id);
			return $this->redirect(['view', 'id' => $model->id]);
		}
		else return $this->render('create', ['model' => $model]);
    }

	/**
	 * Updates an existing User model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id
	 * @return mixed
	 */
	public function actionUpdate($id)
	{
		$model = $this->findModel($id);

		if($model->load(Yii::$app->request->post()))
		{
			if($model->save())
			{
				$ret = $this->uploadPicture($model->id);
				if($ret) return $this->redirect($ret);
			}
		}
		$model->password = $model->passwordConfirm = null;
		return $this->render('update', ['model' => $model]);
	}

	/**
	 * Update your profile
	 * @return mixed
	 */
	public function actionProfileUpdate()
	{
		$model = $this->findModel(Yii::$app->user->id);
        $subscribed = (new MailChimpService())->memberStatus($model->email);
		if(Yii::$app->request->isAjax && $model->load(Yii::$app->request->post()))
		{
			Yii::$app->response->format = Response::FORMAT_JSON;
			return ActiveForm::validate($model, ['email', 'username', 'password', 'firstName', 'lastName']);
		}

		$oldEmail = $model->email;
		if($model->load(Yii::$app->request->post()))
		{
			if($model->email != $oldEmail) $model->emailVerified = 0;
			if(is_null(UploadedFile::getInstance($model, 'hasPhoto')) && empty($model->avatar_name))
			    $model->avatarLoaded = 0;
			if($model->save())
			{
			    $subscribe = Yii::$app->request->post('subscribe');
			    if(isset($subscribe) && (integer)$subscribe === 1)
			    {
                    (new MailChimpService())->subscribeUser($model);
                }else{
                    (new MailChimpService())->removeMember($model->email);
                }
			    if(empty($model->avatar_name))
			    {
                    $ret = $this->uploadPicture($model->id);
                    if($ret) {
                        $this->setFlash('success', Yii::t('app', 'Data saved!'));
                        $this->refresh();
                    }
			    }
			    else {
                    $model->hasPhoto = 0;
                    $model->save(false);
                    $this->setFlash('success', Yii::t('app', 'Data saved!'));
                    $this->refresh();
			    }
			}
		}

		$model->password = $model->passwordConfirm = null;
		$this->layout = '@app/views/layouts/main';
		$data = $this->setupProfileLayout(Yii::$app->user->id);
		$data['page'] = 'userProfile';
		$data['targetModel'] = $model;
		$data['subscribed'] = $subscribed;
		$data['profileContent'] = $this->renderPartial('/profile/_userProfile', $data);
		return $this->render('/site/profile', $data);
	}

	public function actionLoginAsUser($id)
	{
		$model = $this->findModel($id);
		Yii::$app->user->login($model, 0);
		$this->redirect(['/site/profile', 'id' => $id]);
	}

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param int $id
     * @return mixed|Response
     * @throws NotFoundHttpException
     */
	public function actionDelete($id)
	{
        $model = $this->findModel($id);
		$model->setAttribute('status', 'deleted');
		$model->save(false);
        $user = Yii::$app->user;
        if(Yii::$app->authManager->checkAccess($user->id, 'SchoolAdmin')){
            return $this->redirect(Yii::$app->request->referrer);
        }
		return $this->redirect(['view', 'id' => $id]);
	}

	/**
	 * Promote/demote user as school admin
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return \yii\web\Response
	 */
	public function actionSchoolAdmin($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			$role = Yii::$app->authManager->getRole('SchoolAdmin');
			$isAdmin = Yii::$app->authManager->checkAccess($model->id, 'SchoolAdmin');
			if($promote && !$isAdmin)
			{
				Yii::$app->authManager->assign($role, $id);
			}
			elseif(!$promote && $isAdmin)
			{
				Yii::$app->authManager->revoke($role, $id);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Promote/demote user as school author
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return \yii\web\Response
	 */
	public function actionSchoolAuthor($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			$role = Yii::$app->authManager->getRole('SchoolAuthor');
			$isAuthor = Yii::$app->authManager->checkAccess($model->id, 'SchoolAuthor');
			if($promote && !$isAuthor)
			{
				Yii::$app->authManager->assign($role, $id);
			}
			elseif(!$promote && $isAuthor)
			{
				Yii::$app->authManager->revoke($role, $id);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Promote/demote user to approve post
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return \yii\web\Response
	 */
	public function actionApprovePost($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			$role = Yii::$app->authManager->getRole('ApprovePost');
			$canApprovePost = Yii::$app->authManager->checkAccess($model->id, 'ApprovePost');
			if($promote && !$canApprovePost)
			{
				Yii::$app->authManager->assign($role, $id);
			}
			elseif(!$promote && $canApprovePost)
			{
				Yii::$app->authManager->revoke($role, $id);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Promote/demote user to approve video
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return \yii\web\Response
	 */
	public function actionApproveVideo($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			$role = Yii::$app->authManager->getRole('ApproveVideo');
			$canApproveVideo = Yii::$app->authManager->checkAccess($model->id, 'ApproveVideo');
			if($promote && !$canApproveVideo)
			{
				Yii::$app->authManager->assign($role, $id);
			}
			elseif(!$promote && $canApproveVideo)
			{
				Yii::$app->authManager->revoke($role, $id);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Promote/demote user to approve user
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return \yii\web\Response
	 */
	public function actionApproveUser($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			$role = Yii::$app->authManager->getRole('ApproveUser');
			$canApproveUser = Yii::$app->authManager->checkAccess($model->id, 'ApproveUser');
			if($promote && !$canApproveUser)
			{
				Yii::$app->authManager->assign($role, $id);
			}
			elseif(!$promote && $canApproveUser)
			{
				Yii::$app->authManager->revoke($role, $id);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Activate/deactivate user by school admin
	 * @param int $id - user id
	 * @param int|bool $promote
	 * @return Response
	 * @throws ForbiddenHttpException
	 * @throws NotFoundHttpException
	 */
	public function actionToggleStatus($id, $promote)
	{
		$model = $this->findModel($id);
		if($model)
		{
			if($model->institutionId != Yii::$app->user->identity->institutionId) throw new ForbiddenHttpException();
			$isAdmin = Yii::$app->user->can('ApproveUser');
			if(!$isAdmin) throw new ForbiddenHttpException();

			if($promote && $model->status != User::STATUS_ACTIVE)
			{
				$model->updateAttributes(['status' => User::STATUS_ACTIVE, 'updatedAt' => new Expression('UTC_TIMESTAMP()')]);
				$model->sendAccountActivationConfirmation();
			}
			elseif(!$promote && $model->status != User::STATUS_DELETED)
			{
				$model->updateAttributes(['status' => User::STATUS_DELETED, 'updatedAt' => new Expression('UTC_TIMESTAMP()')]);
			}
		}
		return $this->redirect(Yii::$app->request->referrer);
	}

	/**
	 * Finds the User model based on its primary key value.
	 * If the model is not found, a 404 HTTP exception will be thrown.
	 * @param integer $id
	 * @return User the loaded model
	 * @throws NotFoundHttpException if the model cannot be found
	 */
	protected function findModel($id)
	{
		if($this->_workingModel === null) $this->loadModel($id);
		if($this->_workingModel !== null) return $this->_workingModel;
		else throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }

	/**
	 * @param $id
	 * @return bool|\yii\web\Response
	 */
	private function uploadPicture($id)
	{
		/**
		 * @var User $modelReal - reload to get correct class
		 */
		$modelReal = $this->loadModel($id);
		$uploadError = $this->handleImageUpload($modelReal, 'hasPhoto', new BaseUploadForm());
		if(!$uploadError && $modelReal->save(false)) return ['view', 'id' => $id];
		elseif($uploadError) return ['update', 'id' => $id];
		else return false;
	}

}
